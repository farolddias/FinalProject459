#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

//reading input files
int main(int argc, char* argv[])
{
    //Reading mesh input file
    char *tri = argv[1];
    FILE *fptr = fopen(tri, "r");
    int firstNum;

    if (fptr == NULL){
        printf("No file");
        exit(1);
    }

    if(fptr!=NULL){
        fscanf(fptr, "%d", &firstNum);  //1st line - number of triangles
    }
    //printf("Number of triangles: %d\n", firstNum);

    double *triangle = (double*) malloc(firstNum * 9 * sizeof(double)); //creating array with size N

    char *line = NULL;  //string_which_stores_line
    size_t read = 0;    //variable_that_stores_max_size_of_line

    int i=0;
    int x = 0;
    while ((read = getline(&line, &read, fptr)) != -1) {
        x++;
        if(x>=2){
        //printf("%s\n", line);
            char* token = strtok(line, ",");
            while (token != NULL) {
                char* end;
                double d1 = strtod(token, &end);
                triangle[i] = d1;
                //printf("%f\n", triangle[i]);
                token = strtok(NULL, ",");
                i++;
            }
        }
    } 

    char *sph = argv[2];
    FILE *fptr2 = fopen(sph, "r");
    double *sphere;

    if (fptr2 == NULL){
        printf("No file");
        exit(1);
    }

    char *line_sph = NULL;  //string_which_stores_line
    size_t read_sph = 0;    //variable_that_stores_max_size_of_line
    int c=0;
    int sph_num=0;
    double sph_r=0;
    int j=0;

    while ((read_sph = getline(&line_sph, &read_sph, fptr2))!= -1) {
        c++;
        if (c == 2){
            sph_r = atof(line_sph);
        }
        
        if (c == 3){
            sph_num = atoi(line_sph);
            //printf("Number of spheres: %d\n", sph_num);
        }

        sphere = (double*) malloc(sph_num * 3 * sizeof(double)); //creating array with size 

        if(c >= 4){
            char* token_s = strtok(line_sph, ",");
            while (token_s != NULL) {
                char* end;
                double d2 = strtod(token_s, &end);
                sphere[j] = d2;
                //printf("%f\n", sphere[j]);
                token_s = strtok(NULL, ",");
                j++;
            }
        }
    }
 
    FILE *fp;
    /* open for writing */
    fp = fopen("collision_detection.txt", "w");
    if (fp == NULL)
    {
        printf("File does not exist.\n");
    }
    fprintf(fp, "s,t");
    
    int sphere_counter=0;
    char buffer [sizeof(int)*8+1];
    for (j = 0; j < (sph_num * 3); j++) {
        int triangle_counter=0;
        for (i = 0; i < (firstNum * 9); i+9) {
            //see if there is intersection between sphere and plane of triangle
            double Ux=triangle[i+3]-triangle[i];    //vectors of triangle points in x
            double Vx=triangle[i+6]-triangle[i]; 
            double Uy=triangle[i+4]-triangle[i+1];    //vectors of triangle points in y
            double Vy=triangle[i+7]-triangle[i+1]; 
            double Uz=triangle[i+5]-triangle[i+2];    //vectors of triangle points in z
            double Vz=triangle[i+8]-triangle[i+2]; 
            double nx=(Uy*Vz)-(Uz*Vy);      // plane normal
            double ny=(Uz*Vx)-(Ux*Vz);
            double nz=(Ux*Vy)-(Uy*Vx);
            double ndist = sqrt((nx*nx) + (ny*ny) + (nz*nz)); // normalized
            double Nx = nx/ndist;
            double Ny = ny/ndist;
            double Nz = nz/ndist;
            double dist = abs((sphere[j]-triangle[i])*Nx + (sphere[j+1]*triangle[i+1])*Ny + (sphere[j+2]*triangle[i+2])*Nz); 
            if (dist < sph_r){ //collision happens
                fprintf(fp, "%s\n",_itoa(triangle_counter, buffer, 10)); 
            }
            triangle_counter++;
        }
        sphere_counter++;
    }

    fclose(fp);
    free(triangle); 
    free(sphere);   
    return 0;
}
